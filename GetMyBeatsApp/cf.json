{
    "AWSTemplateFormatVersion":"2010-09-09",
    "Description":"description to be determined...",
    "Parameters": {
        "AccessKey": {
            "Type": "String",
            "Description": "aws access key"
        },
        "SecretAccessKey": {
            "Type": "String",
            "Description": "aws secret access key"
        },
        "SSHKey": {
            "Type": "AWS::EC2::KeyPair::KeyName",
            "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instance",
            "ConstraintDescription": "must be the name of an existing EC2 KeyPair"
        },
        "DbSettings": {
            "Type": "String",
            "Description": "database settings"
        },
        "GitCommitHash": {
            "Type": "String",
            "Description": "git commit for software versioning"
        }
    },
    "Resources":{
        "WebServerSecurityGroup" : {
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties" : {
              "GroupDescription" : "Enable HTTP access via port 80",
              "SecurityGroupIngress" : [
                {"IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : "0.0.0.0/0"},
                {"IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : "0.0.0.0/0"}
              ]
            }      
        },
        "getmybeatsapi":{
            "Type":"AWS::EC2::Instance",
            "Properties": {
                "Tags": [
                    {"Key": "Name", "Value": "getmybeatsapi"}
                ],
                "ImageId": "ami-0edab8d70528476d3",
                "SecurityGroups": [{"Ref": "WebServerSecurityGroup"}],
                "InstanceType": "t2.small",
                "KeyName": {"Ref": "SSHKey"},
                "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
                    "#!/bin/bash -xe\n",
                    "yum update -y\n",
                    "yum install -y python-setuptools python3-pip wget nginx git\n",
                    "dnf install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-9.noarch.rpm\n",
                    "wget https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz\n",
                    "pip3 install --upgrade pip\n",
                    "pip3 install awscli virtualenv\n",
                    "mkdir application\n",
                    "sudo mkdir /opt/aws\n",
                    "cd /opt/aws\n",
                    "pip3 install --ignore-installed --target=/opt/aws/ /aws-cfn-bootstrap-py3-latest.tar.gz\n",
                    "ln -s /opt/aws/cfnbootstrap /usr/lib/python3.9/site-packages/cfnbootstrap\n",
                    "/opt/aws/bin/cfn-init",
                    "         --stack ", { "Ref" : "AWS::StackName" },
                    "         --resource getmybeatsapi ",
                    "         --configsets Install ",
                    "         --region ", { "Ref" : "AWS::Region" }, "\n",
                    
                    "# Signal the status from cfn-init\n",
                    "/opt/aws/bin/cfn-signal -e $? ",
                    "         --stack ", { "Ref" : "AWS::StackName" },
                    "         --resource getmybeatsapi ",
                    "         --region ", { "Ref" : "AWS::Region" }, "\n"
               ]]}}
            },
            "Metadata":{
                "AWS::CloudFormation::Init":{
                    "configSets":{
                        "Install":["Install"]
                    },
                    "Install": {
                        "files": {
                            "/root/.ssh/config": {
                                "content" : { "Fn::Join" : ["", [
                                    "Host github.com\n",
                                    "   HostName github.com\n",
                                    "   User git\n",
                                    "   StrictHostKeyChecking no\n"
                                  ]]},
                                  "mode"    : "000700",
                                  "owner"   : "root",
                                  "group"   : "root"
                            },
                            "/root/.aws/credentials": {
                                "content" : { "Fn::Join" : ["", [
                                    "[default]\n",
                                    "aws_access_key_id=", { "Ref" : "AccessKey" }, "\n",
                                    "aws_secret_access_key=", { "Ref" : "SecretAccessKey" }, "\n",
                                    "region=us-west-2\n",
                                    "output=json"
                                  ]]},
                                  "mode"    : "000400",
                                  "owner"   : "root",
                                  "group"   : "root"
                            },
                            "/etc/environment": {
                               "content" : { "Fn::Join" : ["", [
                                  "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\n",
                                  "DATABASE_SETTINGS=", { "Ref" : "DbSettings" }, "\n",
                                  "AWS_ACCESS_KEY=", { "Ref" : "AccessKey" }, "\n",
                                  "AWS_SECRET_ACCESS_KEY=", { "Ref" : "SecretAccessKey" }, "\n",
                                  "GIT_COMMIT_HASH=", { "Ref" : "GitCommitHash" }, "\n"
                                ]]},
                                "mode"    : "000400",
                                "owner"   : "root",
                                "group"   : "root"
                            },
                            "/etc/cfn/cfn-hup.conf" : {
                                "content" : { "Fn::Join" : ["", [
                                  "[main]\n",
                                  "stack=", { "Ref" : "AWS::StackId" }, "\n",
                                  "region=", { "Ref" : "AWS::Region" }, "\n"
                                ]]},
                                "mode"    : "000400",
                                "owner"   : "root",
                                "group"   : "root"
                              },
                
                              "/etc/cfn/hooks.d/cfn-auto-reloader.conf" : {
                                "content": { "Fn::Join" : ["", [
                                  "[cfn-auto-reloader-hook]\n",
                                  "triggers=post.update\n",
                                  "path=Resources.getmybeatsapi.Metadata.AWS::CloudFormation::Init\n",
                                  "action=/opt/aws/bin/cfn-init -v ",
                                  "         --stack ", { "Ref" : "AWS::StackName" },
                                  "         --resource getmybeatsapi ",
                                  "         --configsets Install ",
                                  "         --region ", { "Ref" : "AWS::Region" }, "\n",
                                  "runas=root\n"
                                ]]}
                              },
                              "/etc/systemd/system/gunicorn.socket": {
                                "content": { "Fn::Join" : ["", [
                                    "[Unit]\n",
                                    "Description=gunicorn socket\n",
                                    "[Socket]\n",
                                    "ListenStream=/run/gunicorn.sock\n",
                                    "[Install]\n",
                                    "WantedBy=sockets.target\n"
                                  ]]}
                              },
                              "/etc/systemd/system/gunicorn.service": {
                                "content": { "Fn::Join" : ["", [
                                    "[Unit]\n",
                                    "Description=gunicorn daemon\n",
                                    "Requires=gunicorn.socket\n",
                                    "After=network.target\n",
                                    "[Service]\n",
                                    "User=root\n",
                                    "Group=www-data\n",
                                    "WorkingDirectory=/application/getmybeats\n",
                                    "ExecStart=/application/getmybeatsvenv/bin/gunicorn --access-logfile - --workers 3 --bind ",
                                    "unix:/run/gunicorn.sock GetMyBeatsSettings.wsgi:application\n",
                                    "[Install]\n",
                                    "WantedBy=multi-user.target"
                                  ]]}
                              }
                        },
                        "services": {
                            "systemd": {
                                "nginx": {
                                    "enabled": "true",
                                    "ensureRunning": "true"
                                }
                            }
                        },
                        "commands": {
                            "1-aws-sync" : {
                                "command" : "aws s3 sync s3://git-auth/ .ssh/ && sudo chmod 700 /root/.ssh/*",
                                "cwd": "~",
                                "ignoreErrors": true
                            },
                            "2-download-software" : {
                                "command" : " cd /application && git clone git@github.com:micahnorwoodjordan/getmybeats.git",
                                "cwd": "~",
                                "ignoreErrors": true
                            },
                            "3-checkout-software" : {
                                "command" : " cd /application/getmybeats && git checkout $GIT_COMMIT_HASH",
                                "cwd": "~",
                                "ignoreErrors": true
                            },
                            "4-install-dependencies" : {
                                "command" : " cd /application/getmybeats && pip3 install -r requirements.txt",
                                "cwd": "~",
                                "ignoreErrors": true
                            },
                            "5-django-mysql-hack" : {
                                "command" : "cd /application/getmybeats && echo 'import pymysql' >> GetMyBeatsSettings/__init__.py && echo 'pymysql.install_as_MySQLdb()' >> GetMyBeatsSettings/__init__.py",
                                "cwd": "~",
                                "ignoreErrors": true
                            },
                            "6-create-venv": {
                                "command" : "cd /application && virtualenv getmybeatsvenv && source getmybeatsvenv/bin/activate",
                                "cwd": "~",
                                "ignoreErrors": true
                            },
                            "7-start-gunicorn": {
                                "command" : "systemctl start gunicorn.socket && systemctl enable gunicorn.socket && echo $(systemctl status gunicorn.socket) > /gunicorn-status.txt",
                                "cwd": "~",
                                "ignoreErrors": true
                            }
                        }
                    }
                }
            }
        }
    }
}